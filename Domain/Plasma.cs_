using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Threading;
using LedVestPlasmaGenerator.Repository;


namespace LedVestPlasmaGenerator.Domain
{
    public class Plasma
    {
        private VestManager vest;
        private DisplayManager DisplayManager;
        private FileManager fileManager;

        private Stopwatch stopWatch;

        private const int worldWidth = 645;
        private const int worldHeight = 360;
        private const int displayPixelSize = 15;

        private double brightness;
        private double size;
        private double movement;
        private double movementFactor;
        private long previousFrameTime;

        //keep track of how many itterations have been 
        private int totalItterations;
        private int currentItteration;

        private byte[] outputBuffer;

        //faster rendering if variables are global
        private int redShade, greenShade, blueShade; //rendered color shades
        private double dist, cx, cy; //circle animation

        //helps manage maximum brightness
        private double minShade = -0.8;
        private double maxShade = 0.8;

        private double sinShadePiRed, sinShadePiGreen, sinShadePiBlue;

        private double minShadeR, minShadeG, minShadeB;
        private double maxShadeR, maxShadeG, maxShadeB;
        private double shade = 0.1F;

        private bool showDisplay;

        //color control
        private bool showRed, showGreen, showBlue, morphGreen, morphBlue;

        private string saveFileName;

        public void GeneratePlasmaForVest(double _brightness, double _size, double _movementFactor, int _itterations, bool _display,
                                          bool _showRed, bool _showGreen, bool _showBlue, bool _morphGreen, bool _morphBlue,
                                          string _saveFileName)
        {
            //set the variables
            brightness = _brightness; 
            size = _size;
            movementFactor = _movementFactor;
            totalItterations = _itterations;
            showDisplay = _display;
            showRed = _showRed;
            showGreen = _showGreen;
            showBlue = _showBlue;
            morphGreen = _morphGreen;
            morphBlue = _morphBlue;
            saveFileName = _saveFileName;

            //declare a new instance of the vest manager
            vest = new VestManager();

            //declare file manager
            fileManager = new FileManager();

            //instantiate the output buffer
            outputBuffer = new byte[vest.leds.Length * 3 * totalItterations];

            //instantiate the display manager
            DisplayManager = new DisplayManager(worldWidth, worldHeight);

            //Start a timer
            if (showDisplay)
            {
                stopWatch = new Stopwatch();
                stopWatch.Start();
            }


            //Generate Frames
            while (currentItteration < totalItterations)
            {
                RenderPlasmaFrame();
                currentItteration++;
            }

            DisplayManager.Close();
            WriteBufferToFile(saveFileName, outputBuffer);
        }

        public void RenderPlasmaFrame()
        {
            //Each itteration is advanced through time with the movement value, smaller value = slower movement

            //itterate through all the LED's using the x and y co-ordinates to generate plasma
            for (int i = 0; i < vest.leds.Length; i++)
            {

                //create three different sin waves and combine the results
                var a = 0; // SinVerticle(vest.leds[i].X, vest.leds[i].Y, size);
                var b = SinRotating(vest.leds[i].X, vest.leds[i].Y, size);
                 var c = 0 ; SinCircle(vest.leds[i].X, vest.leds[i].Y, size);
                shade = a + b; // +c;

                //var shade = (
                //            SinVerticle(vest.leds[i].X, vest.leds[i].Y, size)
                //            + SinRotating(vest.leds[i].X, vest.leds[i].Y, size)
                //            + SinCircle(vest.leds[i].X, vest.leds[i].Y, size)
                //            );

                //Create Colors from the shade
                if (showRed) sinShadePiRed = Math.Sin(shade * Math.PI);
                if (showGreen) sinShadePiGreen = Math.Sin(shade * Math.PI + 2);
                if (showBlue) sinShadePiBlue = Math.Sin(shade * Math.PI + 4);

                //helps ensure the entire brightness range is used.
                SelfCorrectMapping();

                //map colors
                if (showRed) redShade = Map(sinShadePiRed, brightness);

                if (showGreen)
                {
                    if (morphGreen)
                    {
                        greenShade = Map(Math.Sin(sinShadePiGreen * (Math.Sin(movement / 2))), brightness);
                    }
                    else
                    {
                        greenShade = Map(sinShadePiGreen, brightness);
                    }
                }

                if (showBlue)
                {
                    if (morphBlue)
                    {
                        blueShade = Map(Math.Sin(sinShadePiBlue * Math.PI * Math.Sin(movement / 7)), brightness);
                    }
                    else
                    {
                        blueShade = Map(sinShadePiBlue, brightness);
                    }
                }

                WriteLedDataToFileBuffer(redShade, greenShade, blueShade, i);

                if (showDisplay) DisplayManager.DisplayPixel(redShade, greenShade, blueShade, vest.leds[i], displayPixelSize);

            }

            movement += movementFactor;

            if (showDisplay)
            {
                var elapsedTime = (long)stopWatch.Elapsed.TotalMilliseconds;
                var loopTime = elapsedTime - previousFrameTime;
                if (loopTime < 40)
                {
                    Thread.Sleep((int)(40 - (elapsedTime - previousFrameTime)));
                }
                previousFrameTime = elapsedTime;
                DisplayManager.Show(currentItteration, totalItterations, (int)loopTime);//show the current frame of plasma
            }
        }

        double SinVerticle(double x, double y, double s)
        {
            return (double)Math.Sin(x / s + movement);
        }

        double SinRotating(double x, double y, double s)
        {
            return (double)Math.Sin((x * Math.Sin(movement / 9) + y * Math.Cos(movement / 6)) / (size * .6));
        }

        double SinCircle(double x, double y, double s)
        {
            cx = worldWidth * Math.Sin(movement / 5);
            cy = worldHeight * Math.Cos(movement / 10);
            //cx = worldWidth / 2.5 * ledFactor;
            //cy = worldHeight / 2.5 * ledFactor;

            dist = Math.Sqrt(Math.Sqrt(cy - y) + Math.Sqrt(cx - x));
            return Math.Sin((dist / s) + movement);
        }

        void SelfCorrectMapping()
        {
            // tune mapping values to ensure maximum led resolution
            if (sinShadePiRed < minShade) minShade = sinShadePiRed;
            if (sinShadePiRed > maxShade) maxShade = sinShadePiRed;
            if (sinShadePiGreen < minShade) minShade = sinShadePiGreen;
            if (sinShadePiGreen > maxShade) maxShade = sinShadePiGreen;
            if (sinShadePiBlue < minShade) minShade = sinShadePiBlue;
            if (sinShadePiBlue > maxShade) maxShade = sinShadePiBlue;
        }

        private void WriteBufferToFile(string saveFileName, byte[] outputBuffer)
        {
            fileManager.WriteBufferToFile(saveFileName, outputBuffer);
        }

        private byte Map(double source, double brightness)
        {
            var normalized = source - minShade;
            var scope = maxShade - minShade;

            var percentage = normalized / scope;
            return (byte)(brightness * percentage);
        }

        private int Color(int r, int g, int b)
        {
            int result;

            result = r & 0x000F; //MSB, mask first 8 bits
            result <<= 8;
            result += g & 0x000F;
            result <<= 8;
            result += b & 0x000F;

            return result;

        }

        private void WriteLedDataToFileBuffer(int redShade, int greenShade, int blueShade, int idx)
        {
            var positon = (currentItteration * vest.leds.Length) + (idx * 3);
            outputBuffer[positon] = (byte)redShade;
            outputBuffer[positon + 1] = (byte)greenShade;
            outputBuffer[positon + 2] = (byte)blueShade;
        }

    }
}
